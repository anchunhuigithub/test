hadoop 学习文档
1, 集中压缩格式的比较
    GZIP比Snappy和LZO占用更多CPU资源，但是提供了高压缩比。对于冷数据来说Gzip非常适合，因为访问频次低。Snappy及LZO适合经常访问的热数据。
    BZip2的压缩比对一些文件的压缩比比GZIP还要高，但是需要压缩解压的时候需要更多的时间成本。HBase不支持Bzip2压缩。
    Snappy通常优于LZO。值得你做一些测试来查看差异。
    对于MapReduce,如果你希望你压缩的数据可以被分割，那么使用BZip2和LZO格式。Snappy和GZip块无法分割，不过,Snappy块里面的文件是SequenceFileor Avro格式就可以被分割。 Snappy最好用SequenceFiles或者Avro数据文件，如果直接用文本文件，因为无法分割的关系，MapReduce没法并行处理。HBase无所谓数据是否可以分割。
    对于MapReduce,中间数据及输出数据均可以压缩。调整MapReduce参数即可，以下是压缩中间数据和输出的例子，第一个例子为MR2，后一个是MR1
2,hadoop 集群安装步骤记录
    参考: https://blog.csdn.net/qymufeng/article/details/80846209
    1, centos 系统上安装 vm player 
        创建虚拟机, 制定iso 创建一个centos虚拟机 配置好jdk, hostname
    2, 复制四分文件 配置网络使用nat 模式  使用这个  vmnet8: 网段的ip地址
    3, 配置ssh免密钥登陆
        设置 .ssh 目录权限 chmod 700 
        设置这个目录下的文件权限为 chmod 600 
    4, 时间同步工具
    5, rsync 同步文件
    4, 配置环境变量
        在 /etc/profile 中添加 JAVA_HOME 和 HADOOP_HOME 
    5, 配置hadoop配置文件
        集群规划    nn1,nn2 作为namenode ha 存在
                    nn3,nn4,nn5 作为datanode 配置namenode 故障自动转移
                    nn1,nn2,nn3,nn4,nn5 都作为zookeeper节点
                    nn3,nn4,nn5 作为journalnode
                    nn2 作为resourcemanager
        配置文件
        core-site.xml 
            <!-- 指定hdfs的nameservice为ns -->
            <property>
                <name>fs.defaultFS</name>
                <value>hdfs://ns</value>
            </property>
            <!--指定hadoop数据临时存放目录-->
            <property>
                <name>hadoop.tmp.dir</name>
                <value>/data/install/hadoop-2.7.3/temp</value>
            </property>
            <property>
                <name>io.file.buffer.size</name>
                <value>4096</value>
            </property>
            <!--指定zookeeper地址-->
            <property>
                <name>ha.zookeeper.quorum</name>
                <value>master1:2181,master2:2181,slave1:2181,slave2:2181,slave3:2181</value>
            </property>
        hdfs-site.xml
            <!--指定hdfs的nameservice为ns，需要和core-site.xml中的保持一致 -->
            <property>
                <name>dfs.nameservices</name>
                <value>ns</value>
            </property>
            <!-- ns下面有两个NameNode，分别是nn1，nn2 -->
            <property>
                <name>dfs.ha.namenodes.ns</name>
                <value>nn1,nn2</value>
            </property>
            <!-- nn1的RPC通信地址 -->
            <property>
                <name>dfs.namenode.rpc-address.ns.nn1</name>
                <value>master1:9000</value>
            </property>
            <!-- nn1的http通信地址 -->
            <property>
                <name>dfs.namenode.http-address.ns.nn1</name>
                <value>master1:50070</value>
            </property>
            <!-- nn2的RPC通信地址 -->
            <property>
                <name>dfs.namenode.rpc-address.ns.nn2</name>
                <value>master2:9000</value>
            </property>
            <!-- nn2的http通信地址 -->
            <property>
                <name>dfs.namenode.http-address.ns.nn2</name>
                <value>master2:50070</value>
            </property>
            <!-- 指定NameNode的元数据在JournalNode上的存放位置 -->
            <property>
                <name>dfs.namenode.shared.edits.dir</name>
                <value>qjournal://slave1:8485;slave2:8485;slave3:8485/ns</value>
            </property>
            <!-- 指定JournalNode在本地磁盘存放数据的位置 -->
            <property>
                <name>dfs.journalnode.edits.dir</name>
                <value>/data/install/hadoop-2.7.3/journal</value>
            </property>
            <!-- 开启NameNode故障时自动切换 -->
            <property>
                <name>dfs.ha.automatic-failover.enabled</name>
                <value>true</value>
            </property>
            <!-- 配置失败自动切换实现方式 -->
            <property>
                <name>dfs.client.failover.proxy.provider.ns</name>
                <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
            </property>
            <!-- 配置隔离机制，如果ssh是默认22端口，value直接写sshfence即可 -->
            <property>
                <name>dfs.ha.fencing.methods</name>
                <value>sshfence(hadoop:22022)</value>
            </property>
            <!-- 使用隔离机制时需要ssh免登陆 -->
            <property>
                <name>dfs.ha.fencing.ssh.private-key-files</name>
                <value>/home/hadoop/.ssh/id_rsa</value>
            </property>

            <property>
                <name>dfs.namenode.name.dir</name>
                <value>file:/data/install/hadoop-2.7.3/hdfs/name</value>
            </property>

            <property>
                <name>dfs.datanode.data.dir</name>
                <value>file:/data/install/hadoop-2.7.3/hdfs/data</value>
            </property>

            <property>
                <name>dfs.replication</name>
                <value>2</value>
            </property>
            <!-- 在NN和DN上开启WebHDFS (REST API)功能,不是必须 -->
            <property>
                <name>dfs.webhdfs.enabled</name>
                <value>true</value>
            </property>
        mapred-site.xml
            <property>
                <name>mapreduce.framework.name</name>
                <value>yarn</value>
            </property>
        yarn-site.xml
            <!-- 指定nodemanager启动时加载server的方式为shuffle server -->
            <property>
                    <name>yarn.nodemanager.aux-services</name>
                    <value>mapreduce_shuffle</value>
            </property>
            <property>
                    <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
                    <value>org.apache.hadoop.mapred.ShuffleHandler</value>
            </property>
            <!-- 指定resourcemanager地址 -->
            <property>
                    <name>yarn.resourcemanager.hostname</name>
                    <value>master1</value>
            </property>
        hadoop-env.sh
            export JAVA_HOME
            export HADOOP_SSH_OPTS="-p 22022"
        yarn-env.sh
            export JAVA_HOME
        启动命令
            首次启动命令
                启动zookeeper bin/zkServer.sh start
                在一个namenode节点上进行创建命名空间
                    bin/hdfs zkfc -formatZK 
                在每一个journalnode节点上启动journalnode
                    sbin/hadoop-daemon.sh start journalnode
                在主namenode节点上格式化namemode和journalnode
                    bin/hdfs namenode -format ns
                在主namenode上启动namenode
                    sbin/hadoop-daemon.sh start namenode
                在备用namenode节点上执行 bin/hdfs namenode -bootstrapStandby 格式化备用namenode节点, 并把元数据从主namenode copy到备用节点上, 不会再次格式化journalnode节点, 然后启动备用namenode节点
                    sbin/hadoop-daemon.sh start namenode
                在两个namenode上都执行sbin/hadoop-daemon.sh start zkfc
                在所有的datanode上启动 sbin/hadoop-daemon.sh start datanode
            日常启动停止命令
                sbin/start-dfs.sh
                sbin/stop-dfs.sh
        错误总结；
            1, hostname 中不要出现_ space等一场字符
            2, http://f.dataguru.cn/hadoop-707122-1-1.html 缺少ssh相关的工具
            3, hdfs-site.xml 配置文件中的集群名称和下面的配置要一致

    Hadoop配置了HA，Spark也需要更改一些配置，否则会报java.net.UnknownHostException的错误，就是在$SPARK_HOME/conf/spark-defaults.conf内添加如下内容：
        spark.files file:///data/install/hadoop-2.7.3/etc/hadoop/hdfs-site.xml,file:///data/install/hadoop-2.7.3/etc/hadoop/core-site.xml
        配置spark 历史服务
            export SPARK_HISTORY_OPTS="-Dspark.history.ui.port=4000
            -Dspark.history.retainedApplications=3
            -Dspark.history.fs.logDirectory=hdfs://ha/spark/log" 注意这个hadoop 集群如果是ha的那么这个地方 hdfs://hadoop_cluster/
            
            export SPARK_DAEMON_JAVA_OPTS="   配置spark master 高可用 
            -Dspark.deploy.recoveryMode=ZOOKEEPER   指定 高可用存储方式
            -Dspark.deploy.zookeeper.url=nn1,nn2,nn3,nn4,nn5  指定zookeeper的地址
            -Dspark.deploy.zookeeper.dir=/spark"  指定spark在zookeeper上的路径
3,hadoop 面试体总结
    3,1 简单描述如何安装配置一个apache开源版hadoop，只描述即可，无需列出完整步骤，能列出步骤更好
        1) 安装JDK并配置环境变量（/etc/profile）
        2) 关闭防火墙
        3) 配置hosts文件，方便hadoop通过主机名访问（/etc/hosts）
        4) 设置ssh免密码登录
        5) 解压缩hadoop安装包，并配置环境变量
        6) 修改配置文件（$HADOOP_HOME/conf）
        hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml
        7) 格式化hdfs文件系统 （hadoop namenode -format）
        8) 启动hadoop （$HADOOP_HOME/bin/start-all.sh）
        9) 使用jps查看进程
    3.2 请列出正常工作的hadoop集群中hadoop都分别需要启动那些进程，他们的作用分别是什么，尽可能写的全面些
        1) NameNode: HDFS的守护进程，负责记录文件是如何分割成数据块，以及这些数据块分别被存储到那些数据节点上，它的主要功能是对内存及IO进行集中管理
        2) Secondary NameNode：辅助后台程序，与NameNode进行通信，以便定期保存HDFS元数据的快照。
        3) DataNode：负责把HDFS数据块读写到本地的文件系统。
        4) JobTracker：负责分配task，并监控所有运行的task。
        5) TaskTracker：负责执行具体的task，并与JobTracker进行交互
    3.3 请列出你所知道的hadoop调度器，并简要说明其工作方法。
        比较流行的三种调度器有：默认调度器FIFO，计算能力调度器Capacity Scheduler，公平调度器Fair Scheduler
        1) 默认调度器FIFO
        hadoop中默认的调度器，采用先进先出的原则
        2) 计算能力调度器Capacity Scheduler
        选择占用资源小，优先级高的先执行
        3) 公平调度器Fair Scheduler
        同一队列中的作业公平共享队列中所有资源
    3.4 Hive有那些方式保存元数据的，各有那些特点。
        1) 内存数据库derby，较小，不常用
        2) 本地mysql，较常用
        3) 远程mysql，不常用
    3.5 请简述hadoop怎样实现二级排序
        在Hadoop中，默认情况下是按照key进行排序，如果要按照value进行排序怎么办？
        有两种方法进行二次排序，分别为：buffer and in memory sort和 value-to-key conversion。

        buffer and in memory sort
        主要思想是：在reduce()函数中，将某个key对应的所有value保存下来，然后进行排序。 这种方法最大的缺点是：可能会造成out of memory。

        value-to-key conversion
        思想是：将key和部分value拼接成一个组合key（实现WritableComparable接口或者调setSortComparatorClass函数）
        ，这样reduce获取的结果便是先按key排序，后按value排序的结果，需要注意的是，用户需要自己实现Paritioner，以便只按照key进行数据划分。
        hadoop显式的支持二次排序，在Configuration类中有个setGroupingComparatorClass()方法，可用于设置排序group的key值。《Hadoop&Spark解决二次排序问题(Hadoop篇)》
    3.6 简述hadoop实现Join的几种方法。
        (1)、reduce side join
            reduce side join是一种最简单的join方式，其主要思想如下：
            在map阶段，map函数同时读取两个文件File1和File2，为了区分两种来源的key/value数据对，对每条数据打一个标签（tag）,比如：tag=0表示来自文件File1，tag=2表示来自文件File2。即：map阶段的主要任务是对不同文件中的数据打标签。
            在reduce阶段，reduce函数获取key相同的来自File1和File2文件的value list， 然后对于同一个key，对File1和File2中的数据进行join（笛卡尔乘积）。即：reduce阶段进行实际的连接操作。

        (2)、map side join
            之所以存在reduce side join，是因为在map阶段不能获取所有需要的join字段，即：同一个key对应的字段可能位于不同map中。Reduce side join是非常低效的，因为shuffle阶段要进行大量的数据传输。
            Map side join是针对以下场景进行的优化：两个待连接表中，有一个表非常大，而另一个表非常小，以至于小表可以直接存放到内存中。这样，我们可以将小表复制多份，让每个map task内存中存在一份（比如存放到hash table中），然后只扫描大表：对于大表中的每一条记录key/value，在hash table中查找是否有相同的key的记录，如果有，则连接后输出即可。
            为了支持文件的复制，Hadoop提供了一个类DistributedCache，使用该类的方法如下：
            (1）用户使用静态方法DistributedCache.addCacheFile()指定要复制的文件，它的参数是文件的URI（如果是HDFS上的文件，可以这样：hdfs://namenode:9000/home/XXX/file，其中9000是自己配置的NameNode端口号）。JobTracker在作业启动之前会获取这个URI列表，并将相应的文件拷贝到各个TaskTracker的本地磁盘上。（2）用户使用DistributedCache.getLocalCacheFiles()方法获取文件目录，并使用标准的文件读写API读取相应的文件。

        (3)、SemiJoin
            SemiJoin，也叫半连接，是从分布式数据库中借鉴过来的方法。它的产生动机是：对于reduce side join，跨机器的数据传输量非常大，这成了join操作的一个瓶颈，如果能够在map端过滤掉不会参加join操作的数据，则可以大大节省网络IO。
            实现方法很简单：选取一个小表，假设是File1，将其参与join的key抽取出来，保存到文件File3中，File3文件一般很小，可以放到内存中。在map阶段，使用DistributedCache将File3复制到各个TaskTracker上，然后将File2中不在File3中的key对应的记录过滤掉，剩下的reduce阶段的工作与reduce side join相同。

        (4)、reduce side join + BloomFilter
            在某些情况下，SemiJoin抽取出来的小表的key集合在内存中仍然存放不下，这时候可以使用BloomFiler以节省空间。
            BloomFilter最常见的作用是：判断某个元素是否在一个集合里面。它最重要的两个方法是：add() 和contains()。最大的特点是不会存在false negative，即：如果contains()返回false，则该元素一定不在集合中，但会存在一定的true negative，即：如果contains()返回true，则该元素可能在集合中。
            因而可将小表中的key保存到BloomFilter中，在map阶段过滤大表，可能有一些不在小表中的记录没有过滤掉（但是在小表中的记录一定不会过滤掉），这没关系，只不过增加了少量的网络IO而已。
    3.7 请简述MapReduce中combiner、partition的作用
        (1)、combiner
            有时一个map可能会产生大量的输出，combiner的作用是在map端对输出先做一次合并，以减少网络传输到reducer的数量。
            注意：mapper的输出为combiner的输入，reducer的输入为combiner的输出。

        (2)、partition
            把map任务输出的中间结果按照key的范围划分成R份(R是预先定义的reduce任务的个数)，划分时通常使用hash函数，如：hash(key) mod R
            这样可以保证一段范围内的key，一定会由一个reduce任务来处理
    3.8 请说说hadoop1的HA如何实现？

    3.9 列举出hadoop中定义的最常用的InputFormats。那个是默认的？

    3.10 TextInputFormat和KeyValueInputFormat类之间的不同之处在于哪里？

    3.11 hadoop中的InputSplit是什么？

    3.12 hadoop框架中文件拆分是如何被触发的？

    3.13 hadoop中的RecordReader的目的是什么？

    3.14 如果hadoop中没有定义定制分区，那么如何在输出到reducer前执行数据分区？

    3.15 什么是jobtracker？jobtracker有哪些特别的函数？

    3.16 hadoop中job和task之间是什么关系？

    3.17 假设hadoop一个job产生了100个task，其中一个task失败了，hadoop会如何处理？

    3.18 hadoop推测执行是如何实现的？

    3.19 关系型数据库有什么弱点？
        很难进行分布式部署，I/O瓶颈显著，依赖于强大的服务器，需要花更大的代价才能突破性能极限
        很难处理非结构化数据

    3.20 什么情况下使用hbase？
        适合海量的，但同时也是简单的操作（例如：key-value）
        成熟的数据分析主题，查询模式已经确定并且不会轻易改变。
        传统的关系型数据库已经无法承受负荷，高速插入，大量读取
    3.21 有一千万条短信，有重复，以文本文件的形式保存，一行一条，有重复。请用5分钟时间，找出重复出现最多的前10条。
        分析：
        常规方法是先排序，在遍历一次，找出重复最多的前10条。但是排序的算法复杂度最低为nlgn。
        可以设计一个 hash_table, hash_map ，依次读取一千万条短信，加载到hash_table表中，并且统计重复的次数，与此同时维护一张最多10条的短信表。
        这样遍历一次就能找出最多的前10条，算法复杂度为 O(n)。
    3.22 hbase怎么预分区？

	3.23 hbase怎么给web前台提供接口来访问？

	3.24 htable API有没有线程安全问题，在程序中是单例还是多例？

	3.25 hbase有没有并发问题？

	3.26 metaq消息队列，zookeeper集群，storm集群，就可以完成对商城推荐系统功能吗？还有没有其他的中间件？

	3.27 storm 怎么完成对单词的计数？

	3.28 hdfs的client端，复制到第三个副本时宕机， hdfs怎么恢复保证下次写第三副本?

	3.29 block块信息是先写dataNode还是先写nameNode?

	3.30 Hadoop生态圈中各种框架的运用场景？

	3.31 hive中的压缩格式RCFile、TextFile、SequenceFile各有什么区别？

	3.32 说明 Hadoop 2.0 的基本构成。

	3.33 相比于 HDFS1.0, HDFS 2.0最主要的改进在哪几方面？

	3.34 试使用"步骤 1，步骤 2，步骤 3…" 说明YARN中运行应用程序的基本流程。

	3.35 MapReduce2.0中，MRAppMaster主要作用是什么？MRAppMaster如何实现任务容错的？

	3.36 为什么会产生yarn, 它解决了什么问题，有什么优势

	1. 集群多少台, 数据量多大, 吞吐量是多大, 每天处理多少G的数据? 

	2. 我们的日志是不是除了apache的访问日志是不是还有其他的日志? 

	3. 假设我们有其他的日志是不是可以对这个日志有其他的业务分析? 这些业务分析都有什么? 

	4. 你们的服务器有多少台? 服务器的内存多大? 

	5. 你们的服务器怎么分布的? (这里说地理位置分布, 最好也从机架方面也谈谈)

	6. 你平常在公司都干些什么(一些建议)

	7. 你们的集群规模? 

		537台. 

	8. 你们的数据是用什么导入到数据库的? 导入到什么数据库? 
		处理之前的导入: 通过 hadoop 命令导入到 hdfs 文件系统
		处理完成之后的导出: 利用 hive 处理完成之后的数据, 通过 sqoop 导出到 mysql 数据库中, 以供报表层使用. 

	9. 你们业务数据量多大? 有多少行数据? 
		开发时使用的是部分数据, 不是全量数据, 有将近一亿行( 8\  9 千万, 具体不详, 一般开发中也没人会特别关心这个问题)

	10. 你们处理数据是直接读数据库的数据还是读文本数据? 
		将日志数据导入到 hdfs 之后进行处理

	11. 你们写 hive 的 hql 语句, 大概有多少条? 
		不清楚, 我自己写的时候也没有做过统计

	12. 你们提交的 job 任务大概有多少个? 这些 job 执行完大概用多少时间? 
		没统计过, 加上测试的, 会有很多

	13. 你在项目中主要的工作任务是? 
		利用 hive 分析数据

	14. 你在项目中遇到了哪些难题, 是怎么解决的? 
		某些任务执行时间过长, 且失败率过高, 检查日志后发现没有执行完就失败, 原因出在hadoop 的 job 的 timeout 过短(相对于集群的能力来说), 设置长一点即可

	15. 你自己写过 udf 函数么? 写了哪些? 

	16. 你的项目提交到 job 的时候数据量有多大? 

	17. 数据备份, 你们是多少份, 如果数据超过存储容量, 你们怎么处理? 

	18. 怎么提升多个 JOB 同时执行带来的压力, 如何优化, 说说思路? 

	19. 你们用 HBASE 存储什么数据? 

	20. 你们的 hive 处理数据能达到的指标是多少? 

	21. 你们的 hbase 大概在公司业务中(主要是网上商城)大概都几个表, 几个表簇, 都存什么样的数据? 
	1.文件大小默认为64M, 改为128M有啥影响? 

    2.RPC的原理? 

    3.NameNode与SecondaryNameNode的区别与联系? 

    4.介绍MadpReduce整个过程, 比如把WordCount的例子的细节将清楚(重点讲解Shuffle)? 

    5.MapReduce出现单点负载多大, 怎么负载平衡? 

    6.MapReduce怎么实现Top10? 

    7.hadoop底层存储设计

    8.zookeeper有什么优点, 用在什么场合

    9.Hbase中的metastore用来做什么的? 

    10.HBase在进行模型设计时重点在什么地方? 一张表中国定义多少个Column Family最合适? 为什么? 

    11.如何提高HBase客户端的读写性能? 请举例说明. 

    12.在hadoop开发过程中使用过哪些算法? 其应用场景是什么? 

    13.MapReduce程序如何发布? 如果MapReduce中涉及到了第三方的jar 包, 该如何处理? 

    14.在实际工作中使用过哪些集群的运维工具, 请分别阐述其作用. 
	1\ map方法是如何调用reduce方法的? 

    2\ fsimage和edit的区别? 

    3\ hadoop1和hadoop2的区别? 

    4\ 列举几个配置文件优化? 

    5\ 写出你对zookeeper的理解

    6\ datanode首次加入cluster的时候, 如果log报告不兼容文件版本, 那需要namenode执行格式化操作, 这样处理的原因是? 

    7\ hbase 集群安装注意事项
	1. linux 基础: 
    (1) find 用法
    (2) 给出一个文本: 
    	http://aaa.com
    	http://bbb.com
    	http://bbb.com
    	http://bbb.com
    	http://ccc.com
    	http://ccc.com
    	让写shell统计, 最后输出结果, 要求结果还要排序
    	aaa 1
    	ccc 2
    	bbb 3

    2. 画出公司的hadoop项目架构
	
	1. 简单说说map端和reduce端溢写的细节

    2. hive的物理模型跟传统数据库有什么不同

    3. 描述一下hadoop机架感知

    4. 对于mahout, 如何进行推荐\ 分类\ 聚类的代码二次开发分别实现那些接口

    5. 直接将时间戳作为行健, 在写入单个region 时候会发生热点问题, 为什么呢? 
	
	1. 比方:如今有10个文件夹, 每个文件夹都有1000000个url. 如今让你找出top1000000url. 
    	方法一: 
    	运用2个job, 第一个job直接用filesystem读取10个文件夹作为map输入, url做key, reduce计算url的sum, 
    	下一个job map用url作key, 运用sum作二次排序, reduce中取top10000000

    	方法二: 
    	建hive表A, 挂分区channel, 每个文件夹是一个分区.
    	select x.url,x.c from(select url,count(1) as c from A where channel ='' group by url) x order by x.c desc limit 1000000;

    2.如果让你设计, 你觉得一个分布式文件系统应该如何设计, 考虑哪方面内容? 
	
	1. 下面哪个程序负责 HDFS 数据存储
    	a)NameNode b)Jobtracker c)Datanode d)secondaryNameNode e)tasktracker
   		答案: C datanode

    2. HDfS 中的 block 默认保存几份? 
    	a)3 份 b)2 份 c)1 份d)不确定
    	答案:A 默认3份

    3. 下列哪个程序通常与 NameNode在一个节点启动? 
    	a)SecondaryNameNode b)DataNode c)TaskTracker d)Jobtracker
    	答案: D
    	分析: 
    	hadoop的集群是基于master/slave模式, namenode和jobtracker属于master, datanode和tasktracker属于slave, master只有一个, 而slave有多个
    	SecondaryNameNode内存需求和NameNode在一个数量级上, 所以通常secondary NameNode(运行在单独的物理机器上)和NameNode运行在不同的机器上. 
    	JobTracker对应于NameNode, TaskTracker对应于DataNode
    	DataNode和NameNode是针对HDFS数据存放来而言的, JobTracker和TaskTracker是对于MapReduce执行而言的

    mapreduce中几个主要概念, mapreduce整体上可以分为这么几条执行线索: jobclient, JobTracker与TaskTracker. 
    (1)\ JobClient会在用户端通过JobClient类将应用已经配置参数打包成jar文件存储到hdfs, 
    并把路径提交到Jobtracker,然后由JobTracker创建每一个Task(即MapTask和ReduceTask)并将它们分发到各个TaskTracker服务中去执行
    (2)\ JobTracker是一个master服务, 软件启动之后JobTracker接收Job, 负责调度Job的每一个子任务task运行于TaskTracker上, 
    并监控它们, 如果发现有失败的task就重新运行它. 一般应该把JobTracker部署在单独的机器上. 
    (3)\ TaskTracker是运行在多个节点上的slaver服务. TaskTracker主动与JobTracker通信, 接收作业, 并负责直接执行每一个任务. 
    TaskTracker都需要运行在HDFS的DataNode上

    4. Hadoop作者
    	a)Martin Fowler b)Kent Beck c)Doug cutting +
   	 	答案: C Doug cutting

    5. HDFS默认Block Size
    	a)32MB b)64MB c)128MB
    	答案: B(Hadoop 1.x是64MB；Hadoop 2.x都128了. )

    6. 下列哪项通常是集群的最主要瓶颈
    	a)CPU b)网络 c)磁盘IO d)内存
    	答案: C磁盘
    	分析: 
    	首先集群的目的是为了节省成本, 用廉价的pc机, 取代小型机及大型机. cpu处理能力强, 内存够大, 所以集群的瓶颈不可能是a和d; 网络是一种稀缺资源, 但是并不是瓶颈. 由于大数据面临海量数据, 读写数据都需要io, 然后还要冗余数据, hadoop一般备3份数据, 所以IO就会打折扣. 对于磁盘IO: 当我们面临集群作战的时候, 我们所希望的是即读即得. 可是面对大数据, 读取数据需要经过IO, 这里可以把IO理解为水的管道. 管道越大越强, 我们对于T级的数据读取就越快. 所以IO的好坏, 直接影响了集群对于数据的处理. 

    7. 关于SecondaryNameNode哪项是正确的? 
    	a)它是NameNode的热备 b)它对内存没有要求
    	c)它的目的是帮助NameNode合并编辑日志, 减少NameNode启动时间
    	d)SecondaryNameNode应与NameNode部署到一个节点
    	答案C. 
	8. 下列哪项可以作为集群的管理? 
    	a)Puppet b)Pdsh c)Cloudera Manager d)Zookeeper
    	答案: ABC
    	分析: 
    	A: puppetpuppet是一种Linux\ Unix\ windows平台的集中配置管理系统
    	B: pdsh可以实现在在多台机器上执行相同的命令
    	详细参考: 集群管理小工具介绍-pdsh
    	C: 可以参考Cloudera Manager四大功能
    	首先这里给管理下一个定义: 部署\ 配置\ 调试\ 监控, 属于管理, 因为zookeeper不满足上面要求, 所以不纳入管理范围. 

    9. 配置机架感知的下面哪项正确
		a)如果一个机架出问题, 不会影响数据读写
		b)写入数据的时候会写到不同机架的 DataNode 中
		c)MapReduce会根据机架获取离自己比较近的网络数据
		答案: ABC

    10. Client 端上传文件的时候下列哪项正确
		a)数据经过 NameNode 传递给 DataNode
		b)Client端将文件切分为Block, 依次上传
		c)Client只上传数据到一台DataNode, 然后由NameNode负责Block复制工作
		答案: B
		分析: 
		Client向NameNode发起文件写入的请求. NameNode根据文件大小和文件块配置情况, 返回给Client它所管理部分DataNode的信息. 
		Client将文件划分为多个Block, 根据DataNode的地址信息, 按顺序写入到每一个DataNode块中. 

    11. 下列哪个是 Hadoop 运行的模式
		a)单机版 b)伪分布式 c)分布式
		答案: ABC

    12. Cloudera 提供哪几种安装 CDH 的方法
		a)Cloudera manager b)Tarball c)Yum d)Rpm
		答案: ABCD具体可以参考
		Hadoop CDH四种安装方式总结及实例指导
	
	
	13. Ganglia不仅可以进行监控, 也可以进行告警. (正确)
    分析: 
    此题的目的是考Ganglia的了解. 严格意义上来讲是正确. 
    ganglia作为一款最常用的Linux环境中的监控软件, 它擅长的的是从节点中按照用户的需求以较低的代价采集数据. 但是ganglia在预警以及发生事件后通知用户上并不擅长. 最新的ganglia已经有了部分这方面的功能. 但是更擅长做警告的还有Nagios. Nagios, 就是一款精于预警\ 通知的软件. 通过将Ganglia和Nagios组合起来, 把Ganglia采集的数据作为Nagios的数据源, 然后利用Nagios来发送预警通知, 可以完美的实现一整套监控管理的系统. 

    14. Block Size是不可以修改的. (错误)
    它是可以被修改的
    Hadoop的基础配置文件是hadoop-default.xml, 默认建立一个Job的时候会建立Job的Config, Config首先读入hadoop-default.xml的配置, 然后再读入hadoop-site.xml的配置(这个文件初始的时候配置为空), hadoop-site.xml中主要配置需要覆盖的hadoop-default.xml的系统级配置. 具体配置可以参考下

    <property>  
      <name>dfs.block.size</name>  
	  <value>5120000</value>  
      <description>The default block size for new files.</description>  
    </property>  
    // block的大小, 单位字节, 后面会提到用处, 必须是512的倍数, 因为采用crc作文件完整性校验, 默认配置512是checksum的最小单元.   
	15. Nagios不可以监控Hadoop集群, 因为它不提供 Hadoop 支持. (错误)
	分析: Nagios是集群监控工具, 而且是云计算三大利器之一

	16. 如果NameNode意外终止, SecondaryNameNode会接替它使集群继续工作. (错误)
	分析: 
	SecondaryNameNode是帮助恢复, 而不是替代, 如何恢复, 可以查看

	17. Cloudera CDH 是需要付费使用的. (错误)
	分析: 
	第一套付费产品是Cloudera Enterpris, Cloudera Enterprise在美国加州举行的 Hadoop 大会 (Hadoop Summit) 上公开, 以若干私有管理\ 监控\ 运作工具加强 Hadoop 的功能. 收费采取合约订购方式, 价格随用的 Hadoop 叢集大小变动. 

	18. Hadoop是Java开发的, 所以MapReduce只支持Java语言编写. (错误)

	19. Hadoop 支持数据的随机读写. (错)
		分析: 
		lucene是支持随机读写的, 而hdfs只支持随机读. 但是HBase可以来补救. HBase提供随机读写, 来解决Hadoop不能处理的问题. 
		HBase自底层设计开始即聚焦于各种可伸缩性问题: 表可以很" 高”, 有数十亿个数据行；也可以很" 宽”, 有数百万个列；水平分区并在上千个普通商用机节点上自动复制. 表的模式是物理存储的直接反映, 使系统有可能提高高效的数据结构的序列化\ 存储和检索. 

	20. NameNode 负责管理 metadata, client 端每次读写请求, 它都会从磁盘中读取或则会写入 metadata 信息并反馈 client 端. (错误)
		分析: 
		NameNode 不需要从磁盘读取 metadata, 所有数据都在内存中, 硬盘上的只是序列化的结果, 只有每次 namenode 启动的时候才会读取. 
		(1) 文件写入
		Client向NameNode发起文件写入的请求. 
		NameNode根据文件大小和文件块配置情况, 返回给Client它所管理部分DataNode的信息. 
		Client将文件划分为多个Block, 根据DataNode的地址信息, 按顺序写入到每一个DataNode块中. 

		(2) 文件读取
		Client向NameNode发起文件读取的请求. 
		NameNode返回文件存储的DataNode的信息. 
		Client读取文件信息. 

	21. NameNode 本地磁盘保存了 Block 的位置信息. (正确)
		分析: 
		DataNode是文件存储的基本单元, 它将Block存储在本地文件系统中, 保存了Block的Meta-data, 同时周期性地将所有存在的Block信息发送给NameNode. 

	22. DataNode 通过长连接与 NameNode 保持通信. 
		这个有分歧, 首先明确一下概念: 
		(1) 长连接
		Client方与Server方先建立通讯连接, 连接建立后不断开, 然后再进行报文发送和接收. 这种方式下由于通讯连接一直存在, 此种方式常用于点对点通讯. 

		(2) 短连接
		Client方与Server每进行一次报文收发交易时才进行通讯连接, 交易完毕后立即断开连接. 此种方式常用于一点对多点通讯, 比如多个Client连接一个Server.

	23. Hadoop 自身具有严格的权限管理和安全措施保障集群正常运行. (错误)
		hadoop只能阻止好人犯错, 但是不能阻止坏人干坏事

	24. Slave 节点要存储数据, 所以它的磁盘越大越好. (错误)
		分析: 
		一旦Slave节点宕机, 数据恢复是一个难题

	25. hadoop dfsadmin –report 命令用于检测 HDFS 损坏块. (错误)
		分析: 
		hadoop dfsadmin -report
		用这个命令可以快速定位出哪些节点down掉了, HDFS的容量以及使用了多少, 以及每个节点的硬盘使用情况. 

	26. Hadoop 默认调度器策略为 FIFO(正确)

	27. 集群内每个节点都应该配 RAID, 这样避免单磁盘损坏, 影响整个节点运行. (错误)
		分析: 
		首先明白什么是RAID, 可以参考百科磁盘阵列. 这句话错误的地方在于太绝对, 具体情况具体分析. 题目不是重点, 知识才是最重要的. 因为hadoop本身就具有冗余能力, 所以如果不是很严格不需要都配备RAID. 具体参考第二题. 

	28. 因为 HDFS 有多个副本, 所以 NameNode 是不存在单点问题的. (错误)
		分析: 
		NameNode存在单点问题. 了解详细信息, 可以参考
		Hadoop中Namenode单点故障的解决方案及详细介绍AvatarNode

	29. 每个 map 槽就是一个线程. (错误)
		分析: 首先我们知道什么是map槽,map槽->map slot
		map slot只是一个逻辑值 ( org.apache.hadoop.mapred.TaskTracker.TaskLauncher.numFreeSlots  ), 而不是对应着一个线程或者进程

	30. Mapreduce 的 input split 就是一个 block. (错误 )
		InputFormat的数据划分\ Split调度\ 数据读取三个问题的浅析

	31. NameNode 的 Web UI 端口是 50030, 它通过 jetty 启动的 Web 服务. (错误 )
		分析: 
		根据下面, 很显然JOBTRACKER的 Web UI 端口是 50030

		端口说明:   
		默认端口    设置位置                                                                                                    
		9000    namenode                                                                                                  
		8020    namenode                                                                                                  
		8021    JT RPC                                                                                                      
		50030   mapred.job.tracker.http.address JobTracker administrative web GUI        
		50070   dfs.http.address NameNode administrative web GUI                                 
		50010   dfs.datanode.address DataNode control port                  
		50020   dfs.datanode.ipc.address DataNode IPC port, used for block transfer       
		50060   mapred.task.tracker.http.address Per TaskTracker web interface             
		50075   dfs.datanode.http.address Per DataNode web interface                            
		50090   dfs.secondary.http.address Per secondary NameNode web interface        

		设置位置              描述信息  
		namenode              交互端口  
		namenode              RPC交互端口  
		JT RPC                交互端口  
		mapred.job.tracker.http.address JobTracker administrative web GUI     JOBTRACKER的HTTP服务器和端口  
		dfs.http.address NameNode administrative web GUI                              NAMENODE的HTTP服务器和端口  
		dfs.datanode.address DataNode control port               DATANODE控制端口, 主要用于DATANODE初始化时向NAMENODE提出注册和应答请求  
		dfs.datanode.ipc.address DataNode IPC port, used for block transfer    DATANODE的RPC服务器地址和端口  
		mapred.task.tracker.http.address Per TaskTracker web interface           TASKTRACKER的HTTP服务器和端口  
		dfs.datanode.http.address Per DataNode web interface                          DATANODE的HTTP服务器和端口  
		dfs.secondary.http.address Per secondary NameNode web interface     辅助DATANODE的HTTP服务器和端口  
	32. Hadoop 环境变量中的 HADOOP_HEAPSIZE 用于设置所有 Hadoop 守护线程的内存. 它默认是 200 GB. ( 错误)

		hadoop为各个守护进程(namenode,secondarynamenode,jobtracker,datanode,tasktracker)统一分配的内存在hadoop-env.sh中设置, 参数为HADOOP_HEAPSIZE, 默认为1000M. 

	33. DataNode 首次加入 cluster 的时候, 如果 log 中报告不兼容文件版本, 那需要NameNode执行" Hadoop namenode -format”操作格式化磁盘. (错误 )
		分析: 
		这个报错是说明DataNode所装的Hadoop版本和其它节点不一致, 应该检查DataNode的Hadoop版本
	1.hive如何调优? 

    2.hive如何权限控制? 

    3.hbase写数据的原理是什么? 

    4.hive能像关系数据库那样, 建多个库吗? 

    5.hbase宕机如何处理? 

    6.hive实现统计的查询语句是什么? 

    7.生产环境中为什么建议使用外部表? 

    8.hadoop mapreduce创建类DataWritable的作用是什么? 

    9.为什么创建类DataWritable? 
	
	1.假设公司要建一个数据中心, 你会如何规划? 

    2.用Hadoop分析海量日志文件, 每行日志记录了如下数据: 
    TableName(表名), Time(时间), User(用户), TimeSpan(时间开销). 

    要求: 
    编写MapReduce程序算出高峰时间段(如上午10 点)哪张表被访问的最频繁, 以及这段时间访问这张表最多的用户, 以及这个用户的总时间开销

	1. 用mapreduce实现sql语句select count(x) from a group by b? 

    2. 简述MapReduce大致流程, map -> shuffle -> reduce

    3. HDFS如何定位replica

    4. Hadoop参数调优: cluster level: JVM, map/reduce slots, job level: reducer, memory, use combiner? use compression?

    5. hadoop运行的原理? 

    6. mapreduce的原理? 

    7. HDFS存储的机制? 

    8. 如何确认Hadoop集群的健康状况? 
	
	现有1 亿个整数均匀分布, 如果要得到前1K 个最大的数, 求最优的算法. (先不考虑内存的限制, 也不考虑读写外存, 时间复杂度最少的算法即为最优算法)

    我先说下我的想法:分块, 比如分1W块, 每块1W个, 然后分别找出每块最大值, 从这最大的1W个值中找最大1K个, 那么其他的9K 个最大值所在的块即可扔掉, 从剩下的最大的1K 个值所在的块中找前1K个即可. 那么原问题的规模就缩小到了1/10. 
    问题: 
    (1) 这种分块方法的最优时间复杂度. 
    (2) 如何分块达到最优. 比如也可分10W 块, 每块1000 个数. 则问题规模可降到原来1/100. 但事实上复杂度并没降低. 
    (3) 还有没更好更优的方法解决这个问题. 

	1) datanode在什么情况下不会备份? 

    2) hdfs的体系结构? 

    3) sqoop在导入数据到mysql时, 如何让数据不重复导入? 如果存在数据问题sqoop如何处理? 

    4) 请列举曾经修改过的/etc下的配置文件, 并说明修改要解决的问题? 

    5) 描述一下hadoop中, 有哪些地方使用了缓存机制, 作用分别是什么? 
	
	1\ 使用Hive或者自定义MR实现如下逻辑

    product_no lac_id moment start_time user_id county_id staytime city_id  
    13429100031 22554 8 2013-03-11 08:55:19.151754088 571 571 282 571  
    13429100082 22540 8 2013-03-11 08:58:20.152622488 571 571 270 571  
    13429100082 22691 8 2013-03-11 08:56:37.149593624 571 571 103 571  
    13429100087 22705 8 2013-03-11 08:56:51.139539816 571 571 220 571  
    13429100087 22540 8 2013-03-11 08:55:45.150276800 571 571 66 571  
    13429100082 22540 8 2013-03-11 08:55:38.140225200 571 571 133 571  
    13429100140 26642 9 2013-03-11 09:02:19.151754088 571 571 18 571  
    13429100082 22691 8 2013-03-11 08:57:32.151754088 571 571 287 571  
    13429100189 22558 8 2013-03-11 08:56:24.139539816 571 571 48 571  
    13429100349 22503 8 2013-03-11 08:54:30.152622440 571 571 211 571  
    字段解释: 
    product_no: 用户手机号；
    lac_id: 用户所在基站；
    start_time: 用户在此基站的开始时间；
    staytime: 用户在此基站的逗留时间. 

    需求描述: 
    根据lac_id和start_time知道用户当时的位置, 根据staytime 知道用户各个基站的逗留时长. 根据轨迹合并连续基站的staytime. 最终得到每一个用户按时间排序在每一个基站驻留时长

    期望输出举例: 

    13429100082 22540 8 2013-03-11 08:58:20.152622488 571 571 270 571  
    13429100082 22691 8 2013-03-11 08:56:37.149593624 571 571 390 571  
    13429100082 22540 8 2013-03-11 08:55:38.140225200 571 571 133 571  
    13429100087 22705 8 2013-03-11 08:56:51.139539816 571 571 220 571  
    13429100087 22540 8 2013-03-11 08:55:45.150276800 571 571 660 571  
    2\ Linux 脚本能力考察

    2.1 请随意使用各种类型的脚本语言实现: 批量将指定目录下的所有文件中的$HADOOP_HOME替换成/home/ocetl/app/hadoop

    2.2 假设有10 台主机, H1 到H10, 在开启SSH互信的情况下, 编写一个或多个脚本实现在所有的远程主机上执行脚本的功能. 

    例如: runRemoteCmd.sh "ls -l"
    期望结果: 

    H1:
    XXXXXXXX
    XXXXXXXX
    XXXXXXXX
    H2:
    XXXXXXXX
    XXXXXXXX
    XXXXXXXX
    H3:
    ...
    3\ Java能力考察

    3.1 写代码实现1G 大小的文本文件, 行分隔符为\x01\x02,统计一下该文件中的总行数, 要求注意边界情况的处理

    3.2 请描述一下在开发中如何对上面的程序进行性能分析, 对性能进行优化的过程. 
	
	1\ Hive内部表和外部表的区别? 

    　　1\ 在导入数据到外部表, 数据并没有移动到自己的数据仓库目录下, 也就是说外部表中的数据并不是由它自己来管理的！而表则不一样；
    　　2\ 在删除表的时候, Hive将会把属于表的元数据和数据全部删掉；而删除外部表的时候, Hive仅仅删除外部表的元数据, 数据是不会删除的！
    　　那么, 应该如何选择使用哪种表呢? 在大多数情况没有太多的区别, 因此选择只是个人喜好的问题. 但是作为一个经验, 如果所有处理都需要由Hive完成, 那么你应该创建表, 否则使用外部表！
    <Hive表与外部表>

    2\ Hbase的rowkey怎么创建比较好? 列族怎么创建比较好? 

    3\ 用mapreduce怎么处理数据倾斜问题? 

    4\ hadoop框架中怎么来优化? 

    5\ Hbase内部是什么机制? 

    6\ hdfs的数据压缩算法

    7\ hive底层与数据库交互原理

    8\ hbase过滤器实现原则
